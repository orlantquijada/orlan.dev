---
import type { CollectionEntry } from "astro:content";
import { ViewTransitions } from "astro:transitions";
import MetaData from "@/components/Notes/NoteDetailComponents/MetaData.astro";
import { getViewTransitionName } from "@/lib/notes";
import { formatDate } from "@repo/utils";
import { Icon } from "astro-icon/components";
import Layout from "./Layout.astro";

type Props = CollectionEntry<"notes">["data"];

const data = Astro.props;
---

<Layout title={data.title}>
  <ViewTransitions slot="head" />
  <div class="grid place-items-start gap-2">
    <h1
      class="text-balance text-3xl font-medium"
      style={`view-transition-name:${getViewTransitionName(data.title)}`}
    >
      {data.title}
    </h1>
    {
      data.description ? (
      <p class="text-gray-a11 md:max-w-4/5">{data.description}</p>
      ) : null
    }
  </div>

  <div class="flex gap-6">
    <MetaData>
      <Icon name="tag" slot="icon" />

      <ul class="flex items-center">
        <!-- TODO: filter notes by tag link -->
        {
          [...data.tags].map((tag) => (
            <li class="tag">
              <a href="/notes" class="hover:underline">
                {tag}
              </a>
            </li>
          ))
        }
      </ul>
    </MetaData>

    <MetaData>
      <Icon name="clock" slot="icon" />
      <span>{formatDate(data.publishedAt)}</span>
    </MetaData>

    {
      data.updatedAt ? (
        <MetaData>
          <Icon name="pencil" />
          <span>
            {formatDate(
              Array.isArray(data.updatedAt)
                ? data.updatedAt[data.updatedAt.length - 1]!
                : data.updatedAt,
            )}
          </span>
        </MetaData>
      ) : null
    }

    {
      data.wip ? (
        <MetaData>
          <Icon name="wrench" slot="icon" />
          <span>wip</span>
        </MetaData>
      ) : null
    }
  </div>

  <hr class="my-8 w-full border-t-2 border-t-gray-a4" />

  <article>
    <slot />
  </article>
</Layout>

<style lang="css">
  [data-icon] {
    width: 1rem;
    height: 1rem;
  }

  [data-icon='wrench'] {
    width: 15px;
    height: 15px;
  }

  .tag {
    display: grid;
    grid-template-columns: 1fr auto;
  }

  .tag:not(:last-of-type)::after {
    content: 'Â·';
    margin-inline: 0.25rem;
  }

  :global(article > :where(:not(:last-child))) {
    margin-bottom: 1rem;
  }
</style>
